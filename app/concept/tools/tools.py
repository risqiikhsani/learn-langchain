# Special type annotations

#     InjectedToolArg
        # There are cases where certain arguments need to be passed to a tool at runtime but should not be generated by the model itself. 
#     RunnableConfig
        # You can use the RunnableConfig object to pass custom run time values to tools.
#     InjectedState
#     InjectedStore

from langchain_core.tools import tool


@tool
def get_weather_today(location: str) -> str:
    """Tool that returns the weather today."""
    return f"The weather today in {location} is sunny"

print(get_weather_today.invoke("Paris"))

from langchain_core.tools import tool, InjectedToolArg
from typing_extensions import Annotated
@tool
def user_specific_data(name: str, user_id: Annotated[str, InjectedToolArg]) -> str:
    """Tool that store user specific data."""
    return f"Hello {name}, user_id: {user_id}"

# see the input schema, we still see the user id
print(user_specific_data.get_input_schema().model_json_schema())
# see the toll call schema, we dont see the user id
print(user_specific_data.tool_call_schema.model_json_schema())

print(user_specific_data.invoke({"name":"John", "user_id":"XXXX"}))


# bind LLM with tools that needs user_id

# 1. configure bind tools to chat model
from ..chatmodels import openai
tools = [
    get_weather_today,
    user_specific_data
]

llm_with_tools = openai.llm.bind_tools(tools)

# 2. If we want to actually execute our tools using the model-generated tool call, we'll need to inject the user_id ourselves:
from copy import deepcopy
from langchain_core.runnables import chain

@chain
def inject_user_id(ai_msg):
    tool_calls = []
    for tool_call in ai_msg.tool_calls:
        tool_call_copy = deepcopy(tool_call)
        tool_call_copy["args"]["user_id"] = "XXXX"
        tool_calls.append(tool_call_copy)
    return tool_calls

# 3. chain together our model, injection code, and the actual tools to create a tool-executing chain

tool_map = {tool.name: tool for tool in tools}
@chain
def tool_router(tool_call):
    return tool_map[tool_call["name"]]

chain = llm_with_tools | inject_user_id | tool_router.map()
print(chain.invoke("what is the weather of paris today? "))
print(chain.invoke("store my data, name is Risqi"))