# same as rag part 1, except this using messages conversation and tool so that the model can replace the user query with better results

# Indexing: a pipeline for ingesting data from a source and indexing it. This usually happens offline.
# Load: First we need to load our data. This is done with Document Loaders.
# Split: Text splitters break large Documents into smaller chunks. This is useful both for indexing data and passing it into a model, as large chunks are harder to search over and won't fit in a model's finite context window.
# Store: We need somewhere to store and index our splits, so that they can be searched over later. This is often done using a VectorStore and Embeddings model.

# Retrieval and generation: the actual RAG chain, which takes the user query at run time and retrieves the relevant data from the index, then passes that to the model.
# Retrieve: Given a user input, relevant splits are retrieved from storage using a Retriever.
# Generate: A ChatModel / LLM produces an answer using a prompt that includes both the question with the retrieved data


from app.concept.chatmodels.openai import llm

from langchain_openai import OpenAIEmbeddings

embeddings = OpenAIEmbeddings(model="text-embedding-3-large")

from langchain_core.vectorstores import InMemoryVectorStore

vector_store = InMemoryVectorStore(embeddings)


import bs4
from langchain import hub
from langchain_community.document_loaders import WebBaseLoader
from langchain_core.documents import Document
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langgraph.graph import START, StateGraph
from typing_extensions import List, TypedDict
from langchain_core.prompts import PromptTemplate

################### Indexing ##################

# load
loader = WebBaseLoader(
    "https://lilianweng.github.io/posts/2023-06-23-agent/",
    bs_kwargs=dict(
        parse_only=bs4.SoupStrainer(
            class_=("post-content", "post-title", "post-header")
        )
    ),
)

docs = loader.load()

# split into chunks
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
all_splits = text_splitter.split_documents(docs)

# store
vector_store.add_documents(all_splits)

############# Retrieve and Generate ##################

# create retriever
retriever = vector_store.as_retriever()

# Define prompt for question-answering

# way 1 define prompt

# prompt = hub.pull("rlm/rag-prompt")

# way 2 define prompt

# template = """Use the following pieces of context to answer the question at the end.
# If you don't know the answer, just say that you don't know, don't try to make up an answer.
# Use three sentences maximum and keep the answer as concise as possible.
# Always say "thanks for asking!" at the end of the answer.

# {context}

# Question: {question}

# Helpful Answer:"""
# custom_rag_prompt = PromptTemplate.from_template(template)

# way 3 define prompt

prompt = PromptTemplate(
    input_variables=["context", "question"],
    template="Use the following context to answer the question. If you don't know the answer, say you don't know.\n\nContext: {context}\n\nQuestion: {question}\nAnswer:",
)


# This motivates us to represent the state of our RAG application using a sequence of messages. Specifically, we will have
# This model for state is so versatile that LangGraph offers a built-in version for convenience:
from langgraph.graph import MessagesState, StateGraph
graph_builder = StateGraph(MessagesState)


# Leveraging tool-calling to interact with a retrieval step has another benefit, which is that the query for the retrieval is generated by our model. 
from langchain_core.tools import tool
@tool("content_and_artifact")
def retrieve(query: str):
    """Retrieve information related to a query."""
    retrieved_docs_from_vectorstore = retriever.invoke(query, k=2)
    return {
        "context": "\n\n".join(
            (f"Source: {doc.metadata}\n" f"Content: {doc.page_content}")
            for doc in retrieved_docs_from_vectorstore
        )
    }
    
# Our graph will consist of three nodes:
#     A node that fields the user input, either generating a query for the retriever or responding directly;
#     A node for the retriever tool that executes the retrieval step;
#     A node that generates the final response using the retrieved context.
# We build them below. Note that we leverage another pre-built LangGraph component, ToolNode, that executes the tool and adds the result as a ToolMessage to the state.

from langchain_core.messages import SystemMessage
from langgraph.prebuilt import ToolNode

# Generates AI message that may include a tool-call to be sent
def query_or_respond(state: MessagesState) -> MessagesState:
    """Generate tool call for retrieval or respond."""
    llm_with_tools = llm.bind_tools([retrieve])
    response = llm_with_tools.invoke(state["messages"])
    return {"messages": [response]}

# Execute the retrieval
tools = ToolNode([retrieve])

# Generate a response using retrieved context
def generate(state: MessagesState) -> MessagesState:
    """Generate a response using the retrieved context."""
    # Get generated ToolMessages
    recent_tool_messages = []
    for message in reversed(state["messages"]):
        if message.type == "tool":
            recent_tool_messages.append(message)
        else:
            break
    tool_messages = recent_tool_messages[::-1]

    # Format into prompt
    docs_content = "\n\n".join(doc.content for doc in tool_messages)
    system_message_content = (
        "You are an assistant for question-answering tasks. "
        "Use the following pieces of retrieved context to answer "
        "the question. If you don't know the answer, say that you "
        "don't know. Use three sentences maximum and keep the "
        "answer concise."
        "\n\n"
        f"{docs_content}"
    )
    conversation_messages = [
        message
        for message in state["messages"]
        if message.type in ("human", "system")
        or (message.type == "ai" and not message.tool_calls)
    ]
    prompt = [SystemMessage(system_message_content)] + conversation_messages

    # Run
    response = llm.invoke(prompt)
    return {"messages": [response]}

from langgraph.graph import END
from langgraph.prebuilt import ToolNode, tools_condition

graph_builder.add_node(query_or_respond)
graph_builder.add_node(tools)
graph_builder.add_node(generate)

graph_builder.set_entry_point("query_or_respond")
graph_builder.add_conditional_edges(
    "query_or_respond",
    tools_condition,
    {END: END, "tools": "tools"},
)
graph_builder.add_edge("tools", "generate")
graph_builder.add_edge("generate", END)

graph = graph_builder.compile()


# lets test our application

# input_message = "Hello"

# for step in graph.stream(
#     {"messages": [{"role": "user", "content": input_message}]},
#     stream_mode="values",
# ):
#     step["messages"][-1].pretty_print()
    
input_message = "What is Task Decomposition?"

for step in graph.stream(
    {"messages": [{"role": "user", "content": input_message}]},
    stream_mode="values",
):
    step["messages"][-1].pretty_print()